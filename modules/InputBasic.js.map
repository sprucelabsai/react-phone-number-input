{"version":3,"sources":["../source/InputBasic.js"],"names":["createInput","PureComponent","Component","defaultMetadata","InputBasic","state","onChange","event","props","value","newValue","target","format","indexOf","slice","setState","onBlur","_event","stopPropagation","preventDefault","focus","input","storeInput","ref","country","metadata","onFocus","Input","inputComponent","rest","propTypes","string","isRequired","func","object","element","defaultProps"],"mappings":"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","file":"InputBasic.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { parseIncompletePhoneNumber, formatIncompletePhoneNumber } from 'libphonenumber-js/core'\nimport { polyfill as reactLifecyclesCompat } from 'react-lifecycles-compat'\n\n// `PureComponent` is only available in React >= 15.3.0.\nconst PureComponent = React.PureComponent || React.Component\n\nexport function createInput(defaultMetadata) {\n\t/**\n\t * `InputBasic`'s caret is not as \"smart\" as the default `inputComponent`'s\n\t * but still works good enough. When erasing or inserting digits in the middle\n\t * of a phone number the caret usually jumps to the end: this is the expected\n\t * behaviour and it's the workaround for the [Samsung Galaxy smart caret positioning bug](https://github.com/catamphetamine/react-phone-number-input/issues/75).\n\t */\n\tclass InputBasic extends PureComponent {\n\t\t// Prevents React from resetting the `<input/>` caret position.\n\t\t// https://github.com/reactjs/react-redux/issues/525#issuecomment-254852039\n\t\t// https://github.com/facebook/react/issues/955\n\t\tstatic getDerivedStateFromProps({ value }) {\n\t\t\treturn { value }\n\t\t}\n\n\t\tstate = {}\n\n\t\tonChange = (event) => {\n\t\t\tconst { onChange } = this.props\n\t\t\tconst { value } = this.state\n\n\t\t\tlet newValue = parseIncompletePhoneNumber(event.target.value)\n\n\t\t\t// By default, if a value is something like `\"(123)\"`\n\t\t\t// then Backspace would only erase the rightmost brace\n\t\t\t// becoming something like `\"(123\"`\n\t\t\t// which would give the same `\"123\"` value\n\t\t\t// which would then be formatted back to `\"(123)\"`\n\t\t\t// and so a user wouldn't be able to erase the phone number.\n\t\t\t// Working around this issue with this simple hack.\n\t\t\tif (newValue === value) {\n\t\t\t\tif (this.format(newValue).indexOf(event.target.value) === 0) {\n\t\t\t\t\t// Trim the last digit (or plus sign).\n\t\t\t\t\tnewValue = newValue.slice(0, -1)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Prevents React from resetting the `<input/>` caret position.\n\t\t\t// https://github.com/reactjs/react-redux/issues/525#issuecomment-254852039\n\t\t\t// https://github.com/facebook/react/issues/955\n\t\t\tthis.setState({ value: newValue }, () => onChange(newValue))\n\t\t}\n\n\t\t// This `onBlur` interceptor is a workaround for `redux-form`'s bug\n\t\t// so that it gets the up-to-date `value` in its `onBlur` handler.\n\t\t// Without this fix it just gets the actual (raw) input field textual value.\n\t\t// E.g. `+7 800 555 35 35` instead of `+78005553535`.\n\t\t//\n\t\t// New `value` is taken from `event` in `redux-form`'s `handleBlur()`.\n\t\t// https://github.com/erikras/redux-form/blob/785edf8aac3adc84aba2ab6898a4aa8c48687750/src/ConnectedField.js#L168\n\t\t// `redux-form` shouldn't have taken the new `value` from `event`.\n\t\t//\n\t\t// A developer is not supposed to pass this `onBlur` property manually.\n\t\t// Instead, `redux-form` passes `onBlur` to this component automatically\n\t\t// and this component patches that `onBlur` handler (a hacky way but works).\n\t\t//\n\t\tonBlur = (event) => {\n\t\t\tconst { onBlur } = this.props\n\t\t\tconst { value } = this.state\n\t\t\tif (onBlur) {\n\t\t\t\t// `event` is React's `SyntheticEvent`.\n\t\t\t\t// Its `.value` is read-only therefore cloning it.\n\t\t\t\tconst _event = {\n\t\t\t\t\t...event,\n\t\t\t\t\ttarget: {\n\t\t\t\t\t\t...event.target,\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Workaround for `redux-form` event detection.\n\t\t\t\t// https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\n\t\t\t\t_event.stopPropagation = event.stopPropagation\n\t\t\t\t_event.preventDefault  = event.preventDefault\n\t\t\t\treturn onBlur(_event)\n\t\t\t}\n\t\t}\n\n\t\tformat(value) {\n\t\t\tconst { country, metadata } = this.props\n\t\t\treturn formatIncompletePhoneNumber(value, country, metadata)\n\t\t}\n\n\t\tfocus = () => this.input.focus()\n\n\t\tstoreInput = (ref) => this.input = ref\n\n\t\trender() {\n\t\t\tconst {\n\t\t\t\tonChange,\n\t\t\t\tonFocus,\n\t\t\t\tcountry,\n\t\t\t\tmetadata,\n\t\t\t\tinputComponent: Input,\n\t\t\t\t...rest\n\t\t\t} = this.props\n\n\t\t\t// Prevents React from resetting the `<input/>` caret position.\n\t\t\t// https://github.com/reactjs/react-redux/issues/525#issuecomment-254852039\n\t\t\t// https://github.com/facebook/react/issues/955\n\t\t\tconst { value } = this.state\n\n\t\t\t// Deprecated. Should be removed in a future major version release.\n\t\t\t// `type=\"tel\"` and `autoComplete=\"tel\"` properties are here\n\t\t\t// just for the \"Without country select\" component exported from\n\t\t\t// `react-phone-number-input/basic-input` subpackage.\n\t\t\t// These two properties will be overwritten by `<PhoneInput/>` properties\n\t\t\t// when not used as a \"Without country select\" component.\n\n\t\t\treturn (\n\t\t\t\t<Input\n\t\t\t\t\ttype=\"tel\"\n\t\t\t\t\tautoComplete=\"tel\"\n\t\t\t\t\t{...rest}\n\t\t\t\t\tref={this.storeInput}\n\t\t\t\t\tvalue={this.format(value)}\n\t\t\t\t\tonChange={this.onChange}\n\t\t\t\t\tonFocus={onFocus}\n\t\t\t\t\tonBlur={this.onBlur}/>\n\t\t\t)\n\t\t}\n\t}\n\n\tInputBasic.propTypes = {\n\t\t// The parsed phone number.\n\t\t// \"Parsed\" not in a sense of \"E.164\"\n\t\t// but rather in a sense of \"having only\n\t\t// digits and possibly a leading plus character\".\n\t\t// Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\n\t\tvalue : PropTypes.string.isRequired,\n\n\t\t// Updates the `value`.\n\t\tonChange : PropTypes.func.isRequired,\n\n\t\t// Toggles the `--focus` CSS class.\n\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/189\n\t\tonFocus : PropTypes.func,\n\n\t\t// `onBlur` workaround for `redux-form`'s bug.\n\t\tonBlur : PropTypes.func,\n\n\t\t// A two-letter country code for formatting `value`\n\t\t// as a national phone number (e.g. `(800) 555 35 35`).\n\t\t// E.g. \"US\", \"RU\", etc.\n\t\t// If no `country` is passed then `value`\n\t\t// is formatted as an international phone number.\n\t\t// (e.g. `+7 800 555 35 35`)\n\t\tcountry : PropTypes.string,\n\n\t\t// `libphonenumber-js` metadata.\n\t\tmetadata : PropTypes.object.isRequired,\n\n\t\t// The `<input/>` component.\n\t\tinputComponent : PropTypes.element.isRequired\n\t}\n\n\tInputBasic.defaultProps = {\n\t\tmetadata: defaultMetadata,\n\t\tinputComponent: 'input'\n\t}\n\n\treturn reactLifecyclesCompat(InputBasic)\n}\n\nexport default createInput()"]}