{"version":3,"sources":["../source/PhoneInput.js"],"names":["PureComponent","Component","PhoneNumberInput","props","value","labels","international","metadata","country","countries","countryOptions","isCountrySupportedWithError","undefined","filterCountries","filterCountryOptions","phoneNumber","pre_selected_country","filter","_","state","country_select_options","generateCountrySelectOptions","parsed_input","generateParsedInput","onCountryChange","selectedCountry","prevProps","prevState","name","disabled","disablePhoneInput","autoComplete","countrySelectTabIndex","showCountrySelect","style","className","inputClassName","getInputClassName","countrySelectAriaLabel","countrySelectProperties","error","indicateInvalid","CountrySelectComponent","countrySelectComponent","countrySelectProps","InputComponent","inputComponent","numberInputComponent","numberInputProps","ext","flags","flagComponent","flagsPath","internationalIcon","displayInitialValueAsLocalNumber","limitMaxLength","phoneNumberInputProps","hidePhoneInputField","isFocused","_countrySelectProps","key","hasOwnProperty","storeCountrySelectInstance","_onFocus","_onBlur","focus","storePhoneNumberInputInstance","onChange","onFocus","onBlur","onPhoneNumberKeyDown","invalid","cloneElement","parseExtDigits","event","hasUserSelectedACountry","old_default_country","old_value","new_default_country","new_value","new_state","parsedCountry","indexOf","propTypes","string","func","isRequired","onKeyDown","bool","arrayOf","objectOf","element","number","object","node","defaultProps","old_parsed_input","old_country","new_parsed_input","new_country","setState","_input","input","_event","target","stopPropagation","preventDefault","hide","number_input","country_select","CountrySelectOptionIcon","createCountrySelectOptionIconComponent","transformCountryOptions","isCountrySupported","map","label","icon","FlagComponent","InternationalIcon","options","transform","optionsOnTop","optionsOnBottom","appendTo","push","divider","index","option","splice","concat","console","isCountryOptionSupportedWithError","countryOption","length"],"mappings":";;;;;;;;;;;;;AAMA;;;AANA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AAGA;;;;AAEA;;;;AAEA;;AAKA;;AAWA;;;;;;;;;;;;AAEA;AACA,IAAMA,gBAAgB,gBAAMA,aAAN,IAAuB,gBAAMC,SAAnD;;IAGqBC,gB;;;AA0cnB,4BAAYC,KAAZ,EAAmB;AAAA;;AAAA,oIACXA,KADW;;AAAA;;AAAA,sBAGkC,MAAKA,KAHvC;AAAA,QAGTC,KAHS,eAGTA,KAHS;AAAA,QAGFC,MAHE,eAGFA,MAHE;AAAA,QAGMC,aAHN,eAGMA,aAHN;AAAA,QAGqBC,QAHrB,eAGqBA,QAHrB;AAAA,uBAK4B,MAAKJ,KALjC;AAAA,QAKXK,OALW,gBAKXA,OALW;AAAA,QAKFC,SALE,gBAKFA,SALE;AAAA,QAKSC,cALT,gBAKSA,cALT;;AAOjB;;AACA,QAAIF,OAAJ,EAAa;AACX,UAAI,CAAC,MAAKG,2BAAL,CAAiCH,OAAjC,CAAL,EAAgD;AAC9CA,kBAAUI,SAAV;AACD;AACF;;AAED;AACAH,gBAAYI,gBAAgBJ,SAAhB,EAA2BF,QAA3B,CAAZ;;AAEA;AACAG,qBAAiBI,qBAAqBJ,cAArB,EAAqCH,QAArC,CAAjB;;AAEA,QAAMQ,cAAc,oCAAiBX,KAAjB,EAAwBG,QAAxB,CAApB;;AAEA,QAAMS,uBAAuB,yCAC3BD,WAD2B,EAE3BP,OAF2B,EAG3BC,aACE,iCAAgBJ,MAAhB,EAAwBY,MAAxB,CACE;AAAA,aAAKC,MAAM,IAAN,IAAcX,SAASE,SAAT,CAAmBS,CAAnB,CAAnB;AAAA,KADF,CAJyB,EAO3BZ,aAP2B,EAQ3BC,QAR2B,CAA7B;;AAWA,UAAKY,KAAL,GAAa;AACX;AACAhB,aAAO,MAAKA,KAFD;;AAIX;AACAK,eAASQ,oBALE;;AAOX;AACA;AACA;AACA;AACA;AACA;AACAP,0BAbW;;AAeX;AACAW,8BAAwBC,6BACtBZ,SADsB,EAEtBC,cAFsB,EAGtB,MAAKP,KAHiB,CAhBb;;AAsBX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAmB,oBAAcC,oBAAoBnB,KAApB,EAA2BW,WAA3B,EAAwC,MAAKZ,KAA7C,CAhCH;;AAkCX;AACA;AACA;AACA;AACA;AACA;AACA;AACAC;AAzCW,KAAb;AAjCiB;AA4ElB;;;;wCAEmB;AAAA,UACVoB,eADU,GACU,KAAKrB,KADf,CACVqB,eADU;AAAA,UAEZhB,OAFY,GAEA,KAAKL,KAFL,CAEZK,OAFY;AAAA,UAGDiB,eAHC,GAGmB,KAAKN,KAHxB,CAGVX,OAHU;;;AAKlB,UAAIgB,eAAJ,EAAqB;AACnB,YAAI,CAAChB,OAAD,IAAY,CAAC,KAAKG,2BAAL,CAAiCH,OAAjC,CAAjB,EAA4D;AAC1DA,oBAAUI,SAAV;AACD;AACD,YAAIa,oBAAoBjB,OAAxB,EAAiC;AAC/BgB,0BAAgBC,eAAhB;AACD;AACF;AACF;;;uCAEkBC,S,EAAWC,S,EAAW;AAAA,UAC/BH,eAD+B,GACX,KAAKrB,KADM,CAC/BqB,eAD+B;AAEvC;;AACA,UAAIA,mBAAmB,KAAKL,KAAL,CAAWX,OAAX,KAAuBmB,UAAUnB,OAAxD,EAAiE;AAC/DgB,wBAAgB,KAAKL,KAAL,CAAWX,OAA3B;AACD;AACF;;AAED;;;AAMA;;;AA6CA;;;AAiBA;;;;;;;AAgCA;;;AAGA;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA6BA;;;AAOA;;;;6BA+GS;AAAA,mBAyCH,KAAKL,KAzCF;AAAA,UAELyB,IAFK,UAELA,IAFK;AAAA,UAGLC,QAHK,UAGLA,QAHK;AAAA,UAILC,iBAJK,UAILA,iBAJK;AAAA,UAKLC,YALK,UAKLA,YALK;AAAA,UAMLC,qBANK,UAMLA,qBANK;AAAA,UAOLC,iBAPK,UAOLA,iBAPK;AAAA,UAQLC,KARK,UAQLA,KARK;AAAA,UASLC,SATK,UASLA,SATK;AAAA,UAULC,cAVK,UAULA,cAVK;AAAA,UAWLC,iBAXK,UAWLA,iBAXK;AAAA,UAYLC,sBAZK,UAYLA,sBAZK;AAAA,UAaLC,uBAbK,UAaLA,uBAbK;AAAA,UAeLC,KAfK,UAeLA,KAfK;AAAA,UAgBLC,eAhBK,UAgBLA,eAhBK;AAAA,UAkBmBC,sBAlBnB,UAkBLC,sBAlBK;AAAA,UAmBLC,kBAnBK,UAmBLA,kBAnBK;AAAA,UAoBWC,cApBX,UAoBLC,cApBK;AAAA,UAqBiBA,cArBjB,UAqBLC,oBArBK;AAAA,UAsBLC,gBAtBK,UAsBLA,gBAtBK;AAAA,UAwBLC,GAxBK,UAwBLA,GAxBK;AAAA,UA2BI/B,CA3BJ,UA2BLV,OA3BK;AAAA,UA4BLC,SA5BK,UA4BLA,SA5BK;AAAA,UA6BLC,cA7BK,UA6BLA,cA7BK;AAAA,UA8BLL,MA9BK,UA8BLA,MA9BK;AAAA,UA+BL6C,KA/BK,UA+BLA,KA/BK;AAAA,UAgCLC,aAhCK,UAgCLA,aAhCK;AAAA,UAiCLC,SAjCK,UAiCLA,SAjCK;AAAA,UAkCL9C,aAlCK,UAkCLA,aAlCK;AAAA,UAmCL+C,iBAnCK,UAmCLA,iBAnCK;AAAA,UAoCLC,gCApCK,UAoCLA,gCApCK;AAAA,UAqCL9B,eArCK,UAqCLA,eArCK;AAAA,UAsCL+B,cAtCK,UAsCLA,cAtCK;AAAA,UAuCLhD,QAvCK,UAuCLA,QAvCK;AAAA,UAwCFiD,qBAxCE;;AAAA,mBAiDH,KAAKrC,KAjDF;AAAA,UA4CLX,OA5CK,UA4CLA,OA5CK;AAAA,UA6CLiD,mBA7CK,UA6CLA,mBA7CK;AAAA,UA8CLrC,sBA9CK,UA8CLA,sBA9CK;AAAA,UA+CLE,YA/CK,UA+CLA,YA/CK;AAAA,UAgDLoC,SAhDK,UAgDLA,SAhDK;;AAmDP;;AAEA;AACA;;AACA,UAAMC,sBAAsB,EAA5B;AACA,UAAIpB,uBAAJ,EAA6B;AAC3B,aAAK,IAAMqB,GAAX,IAAkBrB,uBAAlB,EAA2C;AACzC,cAAI,KAAKpC,KAAL,CAAW0D,cAAX,CAA0BD,GAA1B,CAAJ,EAAoC;AAClCD,gCAAoBpB,wBAAwBqB,GAAxB,CAApB,IAAoD,KAAKzD,KAAL,CAAWyD,GAAX,CAApD;AACA,mBAAOJ,sBAAsBI,GAAtB,CAAP;AACD;AACF;AACF;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,aACE;AAAA;AAAA;AACE,iBAAO1B,KADT;AAEE,qBAAW,0BACT,0BADS,EAET;AACE,+CAAmCwB,SADrC;AAEE,iDAAqClB,SAASC;AAFhD,WAFS,EAMTN,SANS;AAFb;AAYE;AAAA;AAAA,YAAK,WAAU,+BAAf;AAEGF,+BACC,8BAAC,sBAAD,eACM0B,mBADN;AAEE,iBAAK,KAAKG,0BAFZ;AAGE,kBAAMlC,OAAUA,IAAV,iBAA4BhB,SAHpC;AAIE,0BAAY0B,0BAA0BjC,OAAOG,OAJ/C;AAKE,sBAAUwB;AALZ,aAMMY,kBANN;AAOE,mBAAOpC,OAPT;AAQE,qBAASY,sBARX;AASE,sBAAU,KAAKI,eATjB;AAUE,qBAAS,KAAKuC,QAVhB;AAWE,oBAAQ,KAAKC,OAXf;AAYE,sBAAUnC,QAZZ;AAaE,iCAAqB,KAAK4B,mBAb5B;AAcE,kCAAsB,KAAKQ,KAd7B;AAeE,uBAAU;AAfZ,aAHJ;AAuBG,WAACR,mBAAD,IACC,8BAAC,cAAD;AACE,kBAAK,KADP;AAEE,0BAAc1B;AAFhB,aAGMiB,gBAHN,EAIMQ,qBAJN;AAKE,iBAAK,KAAKU,6BALZ;AAME,kBAAMtC,IANR;AAOE,sBAAUrB,QAPZ;AAQE,qBAASC,OARX;AASE,mBAAOc,gBAAgB,EATzB;AAUE,sBAAU,KAAK6C,QAVjB;AAWE,qBAAS,KAAKC,OAXhB;AAYE,oBAAQ,KAAKC,MAZf;AAaE,uBAAW,KAAKC,oBAblB;AAcE,sBAAUzC,YAAYC,iBAdxB;AAeE,4BAAgBgB,cAflB;AAgBE,uBAAW,0BACT,iCADS,EAET,iCAFS,EAGT;AACE,2DACEjB,YAAYC,iBAFhB;AAGE,0DACEU,SAASC;AAJb,aAHS,EASTL,cATS,EAUTC,qBACEA,kBAAkB;AAChBR,wBAAUA,YAAYC,iBADN;AAEhByC,uBAAS/B,SAASC;AAFF,aAAlB,CAXO;AAhBb,aAxBJ;AA4DGQ,iBAAO,CAACQ,mBAAR,IACC;AAAA;AAAA,cAAO,WAAU,+BAAjB;AACGpD,mBAAO4C,GADV;AAEG,4BAAMuB,YAAN,CAAmBvB,GAAnB,EAAwB;AACvBkB,wBAAUlB,IAAI9C,KAAJ,CAAUgE,QAAV,GACN;AAAA,uBAASlB,IAAI9C,KAAJ,CAAUgE,QAAV,CAAmBM,eAAeC,KAAf,CAAnB,CAAT;AAAA,eADM,GAEN9D,SAHmB;AAIvBwD,uBAAS,KAAKL,QAJS;AAKvBM,sBAAQ,KAAKL,OALU;AAMvB7B,yBAAW,0BACT,iCADS,EAET,qCAFS,EAGT;AACE,6DACEN,YAAYC;AAFhB,eAHS,EAOTM,cAPS,EAQTC,qBACEA,kBAAkB;AAChBR,0BAAUA,YAAYC;AADN,eAAlB,CATO,EAYTmB,IAAI9C,KAAJ,CAAUgC,SAZD;AANY,aAAxB;AAFH;AA7DJ,SAZF;AAqGGK,iBAASC,eAAT,IACC;AAAA;AAAA,YAAK,WAAU,iCAAf;AAAkDD;AAAlD;AAtGJ,OADF;AA2GD;;;;;AA5RD;AACA;AACA;AACA;AACA;6CACgCrC,K,EAAOgB,K,EAAO;AAAA,UAE1CX,OAF0C,GAMxCW,KANwC,CAE1CX,OAF0C;AAAA,UAG1CmE,uBAH0C,GAMxCxD,KANwC,CAG1CwD,uBAH0C;AAAA,UAI1CvE,KAJ0C,GAMxCe,KANwC,CAI1Cf,KAJ0C;AAAA,yBAMxCe,KANwC,CAK1ChB,KAL0C;AAAA,UAKxByE,mBALwB,gBAKjCpE,OALiC;AAAA,UAKIqE,SALJ,gBAKHzE,KALG;AAAA,UAS1CG,QAT0C,GAaxCJ,KAbwC,CAS1CI,QAT0C;AAAA,UAU1CE,SAV0C,GAaxCN,KAbwC,CAU1CM,SAV0C;AAAA,UAWjCqE,mBAXiC,GAaxC3E,KAbwC,CAW1CK,OAX0C;AAAA,UAYnCuE,SAZmC,GAaxC5E,KAbwC,CAY1CC,KAZ0C;;;AAe5C,UAAM4E,YAAY;AAChB;AACA7E,oBAFgB;AAGhB;AACA;AACA;AACA;AACAwE;AAPgB,OAAlB;;AAUA;AACA;AACA,UACExE,MAAMM,SAAN,KAAoBU,MAAMhB,KAAN,CAAYM,SAAhC,IACAN,MAAME,MAAN,KAAiBc,MAAMhB,KAAN,CAAYE,MAD7B,IAEAF,MAAMG,aAAN,KAAwBa,MAAMhB,KAAN,CAAYG,aAHtC,EAIE;AACA;AACA0E,kBAAU5D,sBAAV,GAAmCC,6BACjCR,gBAAgBV,MAAMM,SAAtB,EAAiCF,QAAjC,CADiC,EAEjCO,qBAAqBX,MAAMO,cAA3B,EAA2CH,QAA3C,CAFiC,EAGjCJ,KAHiC,CAAnC;AAKD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UACE2E,wBAAwBF,mBAAxB,IACA,CAACD,uBADD,IAEA,CAACvE,KAFD,IAGA,CAAC2E,SAJH,EAKE;AACA,4BACKC,SADL;AAEExE,mBAASG,4BAA4BmE,mBAA5B,EAAiDvE,QAAjD,IACLuE,mBADK,GAELF;AACJ;AACA;AANF;AAQD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA,WA0BK,IAAIG,cAAcF,SAAd,IAA2BE,cAAc3E,KAA7C,EAAoD;AACvD,cAAMW,cAAc,oCAAiBgE,SAAjB,EAA4BxE,QAA5B,CAApB;AACA,cAAI0E,sBAAJ;AACA,cAAIlE,WAAJ,EAAiB;AACf,gBAAMN,aAAYI,gBAAgBV,MAAMM,SAAtB,EAAiCF,QAAjC,CAAlB;AACA,gBAAI,CAACE,UAAD,IAAcA,WAAUyE,OAAV,CAAkBnE,YAAYP,OAA9B,KAA0C,CAA5D,EAA+D;AAC7DyE,8BAAgBlE,YAAYP,OAA5B;AACD;AACF;AACD,8BACKwE,SADL;AAEE1D,0BAAcC,oBAAoBwD,SAApB,EAA+BhE,WAA/B,EAA4CZ,KAA5C,CAFhB;AAGEC,mBAAO2E,SAHT;AAIEvE,qBAASuE,YAAYE,aAAZ,GAA4BzE;AAJvC;AAMD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,aAAOwE,SAAP;AACD;;;;EA1zB2ChF,a,WACrCmF,S,GAAY;AACjB;;;;;;;AAOA/E,SAAO,oBAAUgF,MARA;;AAUjB;;;AAGAjB,YAAU,oBAAUkB,IAAV,CAAeC,UAbR;;AAejB;;;;AAIAlB,WAAS,oBAAUiB,IAnBF;;AAqBjB;;;;AAIAhB,UAAQ,oBAAUgB,IAzBD;;AA2BjB;;;;AAIAE,aAAW,oBAAUF,IA/BJ;;AAiCjB;;;;AAIA;AACAxD,YAAU,oBAAU2D,IAAV,CAAeF,UAtCR;;AAwCjB;;;;;;;;;;;;;;;;;;;AAmBA;AACAvD,gBAAc,oBAAUqD,MAAV,CAAiBE,UA5Dd;;AA8DjB;;;;;;;;;;;;;;;;;;;AAmBA;AACAhC,oCAAkC,oBAAUkC,IAAV,CAAeF,UAlFhC;;AAoFjB;;;;;;AAMA;AACA9E,WAAS,oBAAU4E,MA3FF;;AA6FjB;;;;;;;AAOA3E,aAAW,oBAAUgF,OAAV,CAAkB,oBAAUL,MAA5B,CApGM;;AAsGjB;;;;;;;;;;AAUA/E,UAAQ,kBAAeiF,UAhHN;;AAkHjB;;;;;;;;;;;;;;;AAeAlC,aAAW,oBAAUgC,MAAV,CAAiBE,UAjIX;;AAmIjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCApC,SAAO,oBAAUwC,QAAV,CAAmB,oBAAUC,OAA7B,CAvKU;;AAyKjB;;;;;;;;;AASAxC,iBAAe,oBAAUwC,OAAV,CAAkBL,UAlLhB;;AAoLjB;;;AAGAhF,iBAAe,oBAAUkF,IAAV,CAAeF,UAvLb;;AAyLjB;;;AAGAjC,qBAAmB,oBAAUsC,OAAV,CAAkBL,UA5LpB;;AA8LjB;;;AAGA;AACArD,qBAAmB,oBAAUuD,IAAV,CAAeF,UAlMjB;;AAoMjB;;;AAGAtD,yBAAuB,oBAAU4D,MAvMhB;;AAyMjB;;;;;AAKAtD,0BAAwB,oBAAU8C,MA9MjB;;AAgNjB;;;;;;;;;;AAUA1E,kBAAgB,oBAAU+E,OAAV,CAAkB,oBAAUL,MAA5B,CA1NC;;AA4NjB;;;AAGAlD,SAAO,oBAAU2D,MA/NA;;AAiOjB;;;AAGA1D,aAAW,oBAAUiD,MApOJ;;AAsOjB;;;AAGAhD,kBAAgB,oBAAUgD,MAzOT;;AA2OjB;;;;;AAKA/C,qBAAmB,oBAAUgD,IAhPZ;;AAkPjB;;;;;;;;;;;;;;;AAeA;AACA;AACA;AACA;AACA;AACA1C,0BAAwB,oBAAUgD,OAAV,CAAkBL,UAtQzB;;AAwQjB;;;AAGA1C,sBAAoB,oBAAUiD,MA3Qb;;AA6QjB;;;;;;;;;;;;;AAaA9C,wBAAsB,oBAAU4C,OAAV,CAAkBL,UA1RvB;;AA4RjB;;;AAGAtC,oBAAkB,oBAAU6C,MA/RX;;AAiSjB;;;;;;;;;;;;;;;;;;AAkBA/C,kBAAgB,oBAAU6C,OAAV,CAAkBL,UAnTjB;;AAqTjB;;;;AAIA;AACA;;AAEA;;;;;;;AAOArC,OAAK,oBAAU6C,IAnUE;;AAqUjB;;;;AAIAvC,kBAAgB,oBAAUiC,IAAV,CAAeF,UAzUd;;AA2UjB;;;AAGA9C,SAAO,oBAAU4C,MA9UA;;AAgVjB;;;;;;AAMA3C,mBAAiB,oBAAU+C,IAtVV;;AAwVjB;;;;;;AAMAjF,YAAU,oBAAiB+E,UA9VV;;AAgWjB;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA9D,mBAAiB,oBAAU6D,IA5WV;;AA8WjB;;;;;;;AAOA;AACA;AACAvD,qBAAmB,oBAAU0D,IAAV,CAAeF;AAvXjB,C,UA0XZS,Y,GAAe;AACpB;;;AAGAlE,YAAU,KAJU;AAKpBC,qBAAmB,KALC;;AAOpB;;;;AAIAW,mBAAiB,IAXG;;AAapB;;;AAGAV,gBAAc,KAhBM;;AAkBpB;;;AAGAoB,+BArBoB;;AAuBpB;;;AAGAC,aAAW,kDA1BS;;AA4BpB;;;AAGA;;AAEA;;;AAGAL,wBAAsB,OApCF;;AAsCpB;;;AAGAD,sCAzCoB;;AA2CpB;;;AAGAb,qBAAmB,IA9CC;;AAgDpB;;;;;;;;;AASAqB,oCAAkC,KAzDd;;AA2DpB;;;;;AAKA;;AAEA;;;;AAIAhD,iBAAe,IAtEK;;AAwEpB;;;;AAIAiD,kBAAgB;AA5EI,C;;;OAqLtB5C,2B,GAA8B,mBAAW;AAAA,QAC/BJ,QAD+B,GAClB,OAAKJ,KADa,CAC/BI,QAD+B;;AAEvC,WAAOI,4BAA4BH,OAA5B,EAAqCD,QAArC,CAAP;AACD,G;;OAGDiB,e,GAAkB,uBAAe;AAAA,kBACA,OAAKrB,KADL;AAAA,QACvBI,QADuB,WACvBA,QADuB;AAAA,QACb4D,QADa,WACbA,QADa;AAAA,kBAGkC,OAAKhD,KAHvC;AAAA,QAGT6E,gBAHS,WAGvB1E,YAHuB;AAAA,QAGkB2E,WAHlB,WAGSzF,OAHT;;AAK/B;AACA;AACA;;AACA,QAAM0F,mBAAmB,mDACvBF,gBADuB,EAEvBC,WAFuB,EAGvBE,WAHuB,EAIvB5F,QAJuB;AAKvB;AACA,QANuB,CAAzB;;AASA,QAAMwE,YAAY,wBAAKmB,gBAAL,EAAuBC,WAAvB,EAAoC5F,QAApC,CAAlB;;AAEA;AACA,WAAK0D,KAAL;;AAEA;AACA;AACA;AACA;;AAEA,WAAKmC,QAAL,CACE;AACE5F,eAAS2F,WADX;AAEExB,+BAAyB,IAF3B;AAGErD,oBAAc4E,gBAHhB;AAIE9F,aAAO2E;AAJT,KADF,EAOE,YAAM;AACJ;AACA;AACA;AACA;AACAZ,eAASY,SAAT;AACD,KAbH;AAeD,G;;OAGDT,oB,GAAuB,iBAAS;AAAA,QACtBiB,SADsB,GACR,OAAKpF,KADG,CACtBoF,SADsB;;AAG9B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAIA,SAAJ,EAAe;AACbA,gBAAUb,KAAV;AACD;AACF,G;;OAODP,Q,GAAW,kBAAU;AAAA,kBAC2C,OAAKhE,KADhD;AAAA,QACXgE,QADW,WACXA,QADW;AAAA,QACD7D,aADC,WACDA,aADC;AAAA,QACciD,cADd,WACcA,cADd;AAAA,QAC8BhD,QAD9B,WAC8BA,QAD9B;;AAAA,sBAGe,8BAChC8F,MADgC,EAEhC,OAAKlF,KAAL,CAAWG,YAFqB,EAGhC,OAAKH,KAAL,CAAWX,OAHqB,EAIhC,OAAKW,KAAL,CAAWV,SAJqB,EAKhCH,aALgC,EAMhCiD,cANgC,EAOhChD,QAPgC,CAHf;AAAA,QAGX+F,KAHW,eAGXA,KAHW;AAAA,QAGJ9F,OAHI,eAGJA,OAHI;AAAA,QAGKJ,KAHL,eAGKA,KAHL;;AAanB,WAAKgG,QAAL,CACE;AACE9E,oBAAcgF,KADhB;AAEElG,kBAFF;AAGEI;AAHF,KADF;AAME;AACA;AACA;AACA;AACA;AAAA,aAAM2D,SAAS/D,KAAT,CAAN;AAAA,KAVF;AAYD,G;;OAGD2D,Q,GAAW;AAAA,WAAM,OAAKqC,QAAL,CAAc,EAAE1C,WAAW,IAAb,EAAd,CAAN;AAAA,G;;OAGXM,O,GAAU;AAAA,WAAM,OAAKoC,QAAL,CAAc,EAAE1C,WAAW,KAAb,EAAd,CAAN;AAAA,G;;OAEVU,O,GAAU,iBAAS;AAAA,QACTA,OADS,GACG,OAAKjE,KADR,CACTiE,OADS;;AAEjB,WAAKL,QAAL;AACA,QAAIK,OAAJ,EAAa;AACXA,cAAQM,KAAR;AACD;AACF,G;;OAWDL,M,GAAS,iBAAS;AAAA,QACRA,MADQ,GACG,OAAKlE,KADR,CACRkE,MADQ;AAAA,QAERjE,KAFQ,GAEE,OAAKe,KAFP,CAERf,KAFQ;;;AAIhB,WAAK4D,OAAL;;AAEA,QAAI,CAACK,MAAL,EAAa;AACX;AACD;;AAED;AACA;AACA,QAAMkC,sBACD7B,KADC;AAEJ8B,2BACK9B,MAAM8B,MADX;AAEEpG;AAFF;AAFI,MAAN;;AAQA;AACA;AACAmG,WAAOE,eAAP,GAAyB/B,MAAM+B,eAA/B;AACAF,WAAOG,cAAP,GAAwBhC,MAAMgC,cAA9B;;AAEA,WAAOrC,OAAOkC,MAAP,CAAP;AACD,G;;OAGD9C,mB,GAAsB,gBAAQ;AAC5B,WAAK2C,QAAL,CAAc;AACZ3C,2BAAqBkD;AADT,KAAd;AAGD,G;;OAGD1C,K,GAAQ;AAAA,WAAM,OAAK2C,YAAL,CAAkB3C,KAAlB,EAAN;AAAA,G;;OAERH,0B,GAA6B;AAAA,WAAM,OAAK+C,cAAL,GAAsB3F,CAA5B;AAAA,G;;OAE7BgD,6B,GAAgC;AAAA,WAAM,OAAK0C,YAAL,GAAoB1F,CAA1B;AAAA,G;;;AAiSlC;;;kBAn/BqBhB,gB;AAo/BrB,SAASmB,4BAAT,CAAsCZ,SAAtC,EAAiDC,cAAjD,EAAiEP,KAAjE,EAAwE;AAAA,MAC9DE,MAD8D,GAC1BF,KAD0B,CAC9DE,MAD8D;AAAA,MACtDC,aADsD,GAC1BH,KAD0B,CACtDG,aADsD;AAAA,MACvCC,QADuC,GAC1BJ,KAD0B,CACvCI,QADuC;;;AAGtE,MAAMuG,0BAA0BC,uCAAuC5G,KAAvC,CAAhC;;AAEA,SAAO6G,wBACL,2CACEvG,aACE,iCAAgBJ,MAAhB,EAAwBY,MAAxB,CACE;AAAA,WAAWT,YAAY,IAAZ,IAAoByG,mBAAmBzG,OAAnB,EAA4BD,QAA5B,CAA/B;AAAA,GADF,CAFJ,EAKEF,MALF,EAMEC,aANF,EAOE4G,GAPF,CAOM;AAAA,QAAG9G,KAAH,QAAGA,KAAH;AAAA,QAAU+G,KAAV,QAAUA,KAAV;AAAA,WAAuB;AAC3B/G,kBAD2B;AAE3B+G,kBAF2B;AAG3BC,YAAMN;AAHqB,KAAvB;AAAA,GAPN,CADK,EAaLpG,cAbK,CAAP;AAeD;;AAED,SAASqG,sCAAT,CAAgD5G,KAAhD,EAAuD;AAAA,MAEnD+C,KAFmD,GAMjD/C,KANiD,CAEnD+C,KAFmD;AAAA,MAGnDE,SAHmD,GAMjDjD,KANiD,CAGnDiD,SAHmD;AAAA,MAIpCiE,aAJoC,GAMjDlH,KANiD,CAInDgD,aAJmD;AAAA,MAKhCmE,iBALgC,GAMjDnH,KANiD,CAKnDkD,iBALmD;;;AAQrD,SAAO;AAAA,QAAGjD,KAAH,SAAGA,KAAH;AAAA,WACL;AAAA;AAAA;AACE,mBAAW,0BAAW,gCAAX,EAA6C;AACtD,2DAAiDA,UAAUQ;AADL,SAA7C;AADb;AAKGR,cACC,8BAAC,aAAD,IAAe,SAASA,KAAxB,EAA+B,OAAO8C,KAAtC,EAA6C,WAAWE,SAAxD,GADD,GAGC,8BAAC,iBAAD;AARJ,KADK;AAAA,GAAP;AAaD;;AAED;AACA;AACA;AACA,SAAS4D,uBAAT,CAAiCO,OAAjC,EAA0CC,SAA1C,EAAqD;AACnD,MAAI,CAACA,SAAL,EAAgB;AACd,WAAOD,OAAP;AACD;;AAED,MAAME,eAAe,EAArB;AACA,MAAMC,kBAAkB,EAAxB;AACA,MAAIC,WAAWF,YAAf;;AAPmD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,QASxC9B,OATwC;;AAUjD,QAAIA,YAAY,GAAhB,EAAqB;AACnBgC,eAASC,IAAT,CAAc,EAAEC,SAAS,IAAX,EAAd;AACD,KAFD,MAEO,IAAIlC,YAAY,KAAZ,IAAqBA,YAAY,GAArC,EAA0C;AAC/CgC,iBAAWD,eAAX;AACD,KAFM,MAEA;AACL;AACA,UAAMI,QAAQP,QAAQrC,OAAR,CACZqC,QAAQtG,MAAR,CAAe;AAAA,eAAU8G,OAAO3H,KAAP,KAAiBuF,OAA3B;AAAA,OAAf,EAAmD,CAAnD,CADY,CAAd;AAGA;AACA,UAAMoC,SAASR,QAAQO,KAAR,CAAf;AACA;AACAP,cAAQS,MAAR,CAAeF,KAAf,EAAsB,CAAtB;AACA;AACAH,eAASC,IAAT,CAAcG,MAAd;AACD;AAzBgD;;AASnD,uBAAsBP,SAAtB,kHAAiC;AAAA;;AAAA;;AAAA;AAiBhC;;AAED,SAAOC,aAAaQ,MAAb,CAAoBV,OAApB,EAA6BU,MAA7B,CAAoCP,eAApC,CAAP;AACD;;AAED,SAASnG,mBAAT,CAA6BnB,KAA7B,EAAoCW,WAApC,EAAiDZ,KAAjD,EAAwD;AAAA,MAC9CmD,gCAD8C,GACTnD,KADS,CAC9CmD,gCAD8C;;AAGtD;AACA;AACA;AACA;AACA;AACA;;AACA,MAAIA,oCAAoCvC,WAApC,IAAmDA,YAAYP,OAAnE,EAA4E;AAC1E,WAAO,gDAA6BO,WAA7B,CAAP;AACD;;AAED,SAAOX,KAAP;AACD;;AAED,SAAS6G,kBAAT,CAA4BzG,OAA5B,EAAqCD,QAArC,EAA+C;AAC7C,SAAOA,SAASE,SAAT,CAAmBoD,cAAnB,CAAkCrD,OAAlC,CAAP;AACD;;AAED,SAASG,2BAAT,CAAqCH,OAArC,EAA8CD,QAA9C,EAAwD;AACtD,MAAI0G,mBAAmBzG,OAAnB,EAA4BD,QAA5B,CAAJ,EAA2C;AACzC,WAAO,IAAP;AACD,GAFD,MAEO;AACL2H,YAAQ1F,KAAR,yBAAoChC,OAApC;AACA,WAAO,KAAP;AACD;AACF;;AAED,SAAS2H,iCAAT,CAA2CC,aAA3C,EAA0D7H,QAA1D,EAAoE;AAClE,UAAQ6H,aAAR;AACE,SAAK,GAAL;AACA,SAAK,KAAL;AACA,SAAK,GAAL;AACE,aAAO,IAAP;AACF;AACE,aAAOzH,4BAA4ByH,aAA5B,EAA2C7H,QAA3C,CAAP;AANJ;AAQD;;AAED,SAASM,eAAT,CAAyBJ,SAAzB,EAAoCF,QAApC,EAA8C;AAC5C,MAAIE,SAAJ,EAAe;AACbA,gBAAYA,UAAUQ,MAAV,CAAiB;AAAA,aAC3BN,4BAA4BH,OAA5B,EAAqCD,QAArC,CAD2B;AAAA,KAAjB,CAAZ;AAGA,QAAIE,UAAU4H,MAAV,KAAqB,CAAzB,EAA4B;AAC1B5H,kBAAYG,SAAZ;AACD;AACF;AACD,SAAOH,SAAP;AACD;;AAED,SAASK,oBAAT,CAA8BJ,cAA9B,EAA8CH,QAA9C,EAAwD;AACtD,MAAIG,cAAJ,EAAoB;AAClBA,qBAAiBA,eAAeO,MAAf,CAAsB;AAAA,aACrCkH,kCAAkCC,aAAlC,EAAiD7H,QAAjD,CADqC;AAAA,KAAtB,CAAjB;AAGA,QAAIG,eAAe2H,MAAf,KAA0B,CAA9B,EAAiC;AAC/B3H,uBAAiBE,SAAjB;AACD;AACF;AACD,SAAOF,cAAP;AACD;;AAED,SAAS+D,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B,MAAIA,KAAJ,EAAW;AACT,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7BA,cAAQ,uBAAYA,KAAZ,CAAR;AACD,KAFD,MAEO,IAAIA,MAAM8B,MAAN,IAAgB9B,MAAM8B,MAAN,CAAapG,KAAjC,EAAwC;AAC7CsE,YAAM8B,MAAN,CAAapG,KAAb,GAAqB,uBAAYsE,MAAM8B,MAAN,CAAapG,KAAzB,CAArB;AACD;AACF;AACD,SAAOsE,KAAP;AACD","file":"PhoneInput.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport { polyfill as reactLifecyclesCompat } from \"react-lifecycles-compat\";\nimport { parseDigits } from \"libphonenumber-js/core\";\n\n// import InputSmart from './InputSmart'\nimport InputBasic from \"./InputBasic\";\n\nimport FlagComponent from \"./Flag\";\n\nimport {\n  metadata as metadataPropType,\n  labels as labelsPropType\n} from \"./PropTypes\";\n\nimport {\n  getPreSelectedCountry,\n  getCountrySelectOptions,\n  parsePhoneNumber,\n  generateNationalNumberDigits,\n  migrateParsedInputForNewCountry,\n  getCountryForPartialE164Number,\n  parseInput,\n  e164\n} from \"./input-control\";\n\nimport { getCountryCodes } from \"./countries\";\n\n// `PureComponent` is only available in React >= 15.3.0.\nconst PureComponent = React.PureComponent || React.Component;\n\n@reactLifecyclesCompat\nexport default class PhoneNumberInput extends PureComponent {\n  static propTypes = {\n    /**\n     * Phone number in `E.164` format.\n     *\n     * Example:\n     *\n     * `\"+12223333333\"`\n     */\n    value: PropTypes.string,\n\n    /**\n     * Updates the `value` as the user inputs the phone number.\n     */\n    onChange: PropTypes.func.isRequired,\n\n    /**\n     * Toggles the `--focus` CSS class.\n     * @ignore\n     */\n    onFocus: PropTypes.func,\n\n    /**\n     * `onBlur` is usually passed by `redux-form`.\n     * @ignore\n     */\n    onBlur: PropTypes.func,\n\n    /**\n     * `onKeyDown` handler (e.g. to handle Enter key press).\n     * @ignore\n     */\n    onKeyDown: PropTypes.func,\n\n    /**\n     * Disables both the phone number `<input/>`\n     * and the country `<select/>`.\n     */\n    // (is `false` by default)\n    disabled: PropTypes.bool.isRequired,\n\n    /**\n     * Sets `autoComplete` property for phone number `<input/>`.\n     *\n     * Web browser's \"autocomplete\" feature\n     * remembers the phone number being input\n     * and can also autofill the `<input/>`\n     * with previously remembered phone numbers.\n     *\n     * https://developers.google.com/web/updates/2015/06/checkout-faster-with-autofill\n     *\n     * For example, can be used to turn it off:\n     *\n     * \"So when should you use `autocomplete=\"off\"`?\n     *  One example is when you've implemented your own version\n     *  of autocomplete for search. Another example is any form field\n     *  where users will input and submit different kinds of information\n     *  where it would not be useful to have the browser remember\n     *  what was submitted previously\".\n     */\n    // (is `\"tel\"` by default)\n    autoComplete: PropTypes.string.isRequired,\n\n    /**\n     * Set to `true` to show the initial `value` in\n     * \"national\" format rather than \"international\".\n     *\n     * For example, if this flag is set to `true`\n     * and the initial `value=\"+12133734253\"` is passed\n     * then the `<input/>` value will be `\"(213) 373-4253\"`.\n     *\n     * By default, this flag is set to `false`,\n     * meaning that if the initial `value=\"+12133734253\"` is passed\n     * then the `<input/>` value will be `\"+1 213 373 4253\"`.\n     *\n     * The reason for such default behaviour is that\n     * the newer generation grows up when there are no stationary phones\n     * and therefore everyone inputs phone numbers in international format\n     * in their smartphones so people gradually get more accustomed to\n     * writing phone numbers in international format rather than in local format.\n     * Future people won't be using \"national\" format, only \"international\".\n     */\n    // (is `false` by default)\n    displayInitialValueAsLocalNumber: PropTypes.bool.isRequired,\n\n    /**\n     * The country to be selected by default.\n     * For example, can be set after a GeoIP lookup.\n     *\n     * Example: `\"US\"`.\n     */\n    // A two-letter country code (\"ISO 3166-1 alpha-2\").\n    country: PropTypes.string,\n\n    /**\n     * If specified, only these countries will be available for selection.\n     *\n     * Example:\n     *\n     * `[\"RU\", \"UA\", \"KZ\"]`\n     */\n    countries: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * Custom country `<select/>` option names.\n     * Also some labels like \"ext\" and country `<select/>` `aria-label`.\n     *\n     * Example:\n     *\n     * `{ \"ZZ\": \"Международный\", RU: \"Россия\", US: \"США\", ... }`\n     *\n     * See the `locales` directory for examples.\n     */\n    labels: labelsPropType.isRequired,\n\n    /**\n     * The base URL path for country flag icons.\n     * By default it loads country flag icons from\n     * `flag-icon-css` repo github pages website.\n     * I imagine someone might want to download\n     * those country flag icons and host them\n     * on their own servers instead.\n     * Warning: in future new countries can be added\n     * to the country select which would result in\n     * \"Image not found\" errors when using custom `flagsPath`\n     * due to the custom-hosted flags bundle being outdated\n     * and missing the new flags.\n     * So if using custom `flagsPath` always check `CHANGELOG.md`\n     * for new country announcements before updating this library.\n     */\n    flagsPath: PropTypes.string.isRequired,\n\n    /**\n     * Custom country flag icon components.\n     * These flags replace the default ones.\n     *\n     * The shape is an object where keys are country codes\n     * and values are flag icon components.\n     * Flag icon components receive the same properties\n     * as `flagComponent` (see below).\n     *\n     * Example:\n     *\n     * `{ \"RU\": () => <img src=\"...\"/> }`\n     *\n     * Can be used to replace the default flags\n     * with custom ones for certain (or all) countries.\n     *\n     * Can also be used to bundle `<svg/>` flags instead of `<img/>`s:\n     *\n     * By default flag icons are inserted as `<img/>`s\n     * with their `src` pointed to `flag-icon-css` repo github pages website.\n     *\n     * There might be some cases\n     * (e.g. a standalone \"native\" app, or an \"intranet\" web application)\n     * when including the full set of `<svg/>` country flags (3 megabytes)\n     * is more appropriate than downloading them individually at runtime only if needed.\n     *\n     * Example:\n     *\n     * `// Uses <svg/> flags (3 megabytes):`\n     *\n     * `import flags from 'react-phone-number-input/flags'`\n     *\n     * `import PhoneInput from 'react-phone-number-input'`\n     *\n     * `<PhoneInput flags={flags} .../>`\n     */\n    flags: PropTypes.objectOf(PropTypes.element),\n\n    /**\n     * Country flag icon component.\n     *\n     * Takes properties:\n     *\n     * * country : string — The country code.\n     * * flagsPath : string — The `flagsPath` property (see above).\n     * * flags : object — The `flags` property (see above).\n     */\n    flagComponent: PropTypes.element.isRequired,\n\n    /**\n     * Set to `false` to drop the \"International\" option from country `<select/>`.\n     */\n    international: PropTypes.bool.isRequired,\n\n    /**\n     * Custom \"International\" country `<select/>` option icon.\n     */\n    internationalIcon: PropTypes.element.isRequired,\n\n    /**\n     * Set to `false` to hide country `<select/>`.\n     */\n    // (is `true` by default)\n    showCountrySelect: PropTypes.bool.isRequired,\n\n    /**\n     * HTML `tabindex` attribute for country `<select/>`.\n     */\n    countrySelectTabIndex: PropTypes.number,\n\n    /**\n     * HTML `aria-label` attribute for country `<select/>`.\n     * The default is `.country` of the `labels` property\n     * which is `\"Country\"` for the default `labels`.\n     */\n    countrySelectAriaLabel: PropTypes.string,\n\n    /**\n     * Can be used to place some countries on top of the list of country `<select/>` options.\n     *\n     * * `\"|\"` — inserts a separator.\n     * * `\"...\"` — means \"the rest of the countries\" (can be omitted).\n     *\n     * Example:\n     *\n     * `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`\n     */\n    countryOptions: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * `<Phone/>` component CSS style object.\n     */\n    style: PropTypes.object,\n\n    /**\n     * `<Phone/>` component CSS class.\n     */\n    className: PropTypes.string,\n\n    /**\n     * Phone number `<input/>` CSS class.\n     */\n    inputClassName: PropTypes.string,\n\n    /**\n     * Returns phone number `<input/>` CSS class string.\n     * Receives an object of shape `{ disabled : boolean?, invalid : boolean? }`.\n     * @ignore\n     */\n    getInputClassName: PropTypes.func,\n\n    /**\n     * Country `<select/>` component.\n     *\n     * Receives properties:\n     *\n     * * `name : string?` — HTML `name` attribute.\n     * * `value : string?` — The currently selected country code.\n     * * `onChange(value : string?)` — Updates the `value`.\n     * * `onFocus()` — Is used to toggle the `--focus` CSS class.\n     * * `onBlur()` — Is used to toggle the `--focus` CSS class.\n     * * `options : object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value : string?, label : string, icon : React.Component }`.\n     * * `disabled : boolean?` — HTML `disabled` attribute.\n     * * `tabIndex : (number|string)?` — HTML `tabIndex` attribute.\n     * * `className : string` — CSS class name.\n     */\n    //\n    // (deprecated)\n    // * `hidePhoneInputField(hide : boolean)` — Can be called to show/hide phone input field. Takes `hide : boolean` argument. E.g. `react-responsive-ui` `<Select/>` uses this to hide phone number input when country select is expanded.\n    // * `focusPhoneInputField()` — Can be called to manually focus phone input field. E.g. `react-responsive-ui` `<Select/>` uses this to focus phone number input after country selection in a timeout (after the phone input field is no longer hidden).\n    //\n    countrySelectComponent: PropTypes.element.isRequired,\n\n    /**\n     * Country `<select/>` component props.\n     */\n    countrySelectProps: PropTypes.object,\n\n    /**\n     * Phone number `<input/>` component.\n     *\n     * Receives properties:\n     *\n     * * `value: string` — The formatted `value`.\n     * * `onChange(event: Event)` — Updates the formatted `value` from `event.target.value`.\n     * * `onFocus()` — Is used to toggle the `--focus` CSS class.\n     * * `onBlur(event: Event)` — Is used to toggle the `--focus` CSS class.\n     * * Other properties like `type=\"tel\"` or `autoComplete=\"tel\"` that should be passed through to the DOM `<input/>`.\n     *\n     * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\n     */\n    numberInputComponent: PropTypes.element.isRequired,\n\n    /**\n     * Phone number `<input/>` component props.\n     */\n    numberInputProps: PropTypes.object,\n\n    /**\n     * Phone number `<input/>` component (a higher-order one).\n     *\n     * Receives properties:\n     *\n     * * `value : string` — The parsed phone number. E.g.: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\n     * * `onChange(value? : string)` — Updates the `value`.\n     * * `onFocus()` — Is used to toggle the `--focus` CSS class.\n     * * `onBlur()` — Is used to toggle the `--focus` CSS class.\n     * * `country : string?` — The currently selected country. `undefined` means \"International\" (no country selected).\n     * * `metadata : object` — `libphonenumber-js` metadata.\n     * * `inputComponent : element` — Phone number `<input/>` component. This is basically the `numberInputComponent` property renamed to `inputComponent`.\n     * * All other properties should be passed through to the underlying `<input/>`.\n     *\n     * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\n     *\n     * @ignore\n     */\n    inputComponent: PropTypes.element.isRequired,\n\n    /**\n     * Set to `false` to use `inputComponent={InputBasic}`\n     * instead of `input-format`'s `<ReactInput/>`.\n     */\n    // Is `false` by default.\n    // smartCaret : PropTypes.bool.isRequired,\n\n    /**\n     * Phone number extension `<input/>` element.\n     *\n     * Example:\n     *\n     *\t`ext={<input value={...} onChange={...}/>}`\n     */\n    ext: PropTypes.node,\n\n    /**\n     * If set to `true` the phone number input will get trimmed\n     * if it exceeds the maximum length for the country.\n     */\n    limitMaxLength: PropTypes.bool.isRequired,\n\n    /**\n     * An error message to show below the phone number `<input/>`. For example, `\"Required\"`.\n     */\n    error: PropTypes.string,\n\n    /**\n     * The `error` is shown only when `indicateInvalid` is `true`.\n     * (which is the default).\n     * @deprecated\n     * @ignore\n     */\n    indicateInvalid: PropTypes.bool,\n\n    /**\n     * `libphonenumber-js` metadata.\n     *\n     * Can be used to pass custom `libphonenumber-js` metadata\n     * to reduce the overall bundle size for those who compile \"custom\" metadata.\n     */\n    metadata: metadataPropType.isRequired,\n\n    /**\n     * Is called every time the selected country changes:\n     * either programmatically or when user selects it manually from the list.\n     */\n    // People have been asking for a way to get the selected country.\n    // @see  https://github.com/catamphetamine/react-phone-number-input/issues/128\n    // For some it's just a \"business requirement\".\n    // I guess it's about gathering as much info on the user as a website can\n    // without introducing any addional fields that would complicate the form\n    // therefore reducing \"conversion\" (that's a marketing term).\n    // Assuming that the phone number's country is the user's country\n    // is not 100% correct but in most cases I guess it's valid.\n    onCountryChange: PropTypes.func,\n\n    /**\n     * Disables only the phone number `<input/>`.\n     *\n     * Some users choose to implement a digital keyboard component for phone number input.\n     * In such cases the phone number input field must be disabled in order for the default system keyboard to not show up on focus.\n     * At the same time, country select should not be disabled in order for the user to be able to choose their country.\n     */\n    // (is `false` by default)\n    // https://github.com/catamphetamine/react-phone-number-input/issues/215\n    disablePhoneInput: PropTypes.bool.isRequired\n  };\n\n  static defaultProps = {\n    /**\n     * Not disabled.\n     */\n    disabled: false,\n    disablePhoneInput: false,\n\n    /**\n     * Show `error` (if passed).\n     * @deprecated\n     */\n    indicateInvalid: true,\n\n    /**\n     * Remember (and autofill) the value as a phone number.\n     */\n    autoComplete: \"tel\",\n\n    /**\n     * Flag icon component.\n     */\n    flagComponent: FlagComponent,\n\n    /**\n     * By default, use icons from `flag-icon-css` github repo.\n     */\n    flagsPath: \"https://lipis.github.io/flag-icon-css/flags/4x3/\",\n\n    /**\n     * Default \"International\" country `<select/>` option icon (globe).\n     */\n    // internationalIcon: InternationalIcon,\n\n    /**\n     * Phone number `<input/>` component.\n     */\n    numberInputComponent: \"input\",\n\n    /**\n     * Phone number `<input/>` component (a higher-order one).\n     */\n    inputComponent: InputBasic,\n\n    /**\n     * Show country `<select/>`.\n     */\n    showCountrySelect: true,\n\n    /**\n     * Don't convert the initially passed phone number `value`\n     * to a national phone number for its country.\n     * The reason is that the newer generation grows up when\n     * there are no stationary phones and therefore everyone inputs\n     * phone numbers with a `+` in their smartphones\n     * so phone numbers written in international form\n     * are gradually being considered more natural than local ones.\n     */\n    displayInitialValueAsLocalNumber: false,\n\n    /**\n     * Set to `false` to use `inputComponent={InputBasic}`\n     * instead of `input-format`'s `<ReactInput/>`.\n     * Is `false` by default.\n     */\n    // smartCaret : false,\n\n    /**\n     * Whether to add the \"International\" option\n     * to the list of countries.\n     */\n    international: true,\n\n    /**\n     * If set to `true` the phone number input will get trimmed\n     * if it exceeds the maximum length for the country.\n     */\n    limitMaxLength: false\n  };\n\n  constructor(props) {\n    super(props);\n\n    const { value, labels, international, metadata } = this.props;\n\n    let { country, countries, countryOptions } = this.props;\n\n    // Validate `country`.\n    if (country) {\n      if (!this.isCountrySupportedWithError(country)) {\n        country = undefined;\n      }\n    }\n\n    // Validate `countries`.\n    countries = filterCountries(countries, metadata);\n\n    // Validate `countryOptions`.\n    countryOptions = filterCountryOptions(countryOptions, metadata);\n\n    const phoneNumber = parsePhoneNumber(value, metadata);\n\n    const pre_selected_country = getPreSelectedCountry(\n      phoneNumber,\n      country,\n      countries ||\n        getCountryCodes(labels).filter(\n          _ => _ === \"ZZ\" || metadata.countries[_]\n        ),\n      international,\n      metadata\n    );\n\n    this.state = {\n      // Workaround for `this.props` inside `getDerivedStateFromProps()`.\n      props: this.props,\n\n      // The country selected.\n      country: pre_selected_country,\n\n      // `countries` are stored in `this.state` because they're filtered.\n      // For example, a developer might theoretically pass some unsupported\n      // countries as part of the `countries` property, and because of that\n      // the component uses `this.state.countries` (which are filtered)\n      // instead of `this.props.countries`\n      // (which could potentially contain unsupported countries).\n      countries,\n\n      // Generate country `<select/>` options.\n      country_select_options: generateCountrySelectOptions(\n        countries,\n        countryOptions,\n        this.props\n      ),\n\n      // `parsed_input` state property holds non-formatted user's input.\n      // The reason is that there's no way of finding out\n      // in which form should `value` be displayed: international or national.\n      // E.g. if `value` is `+78005553535` then it could be input\n      // by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\n      // Hence storing just `value`is not sufficient for correct formatting.\n      // E.g. if a user entered `8 (800) 555-35-35`\n      // then value is `+78005553535` and `parsed_input` is `88005553535`\n      // and if a user entered `+7 800 555 35 35`\n      // then value is `+78005553535` and `parsed_input` is `+78005553535`.\n      parsed_input: generateParsedInput(value, phoneNumber, this.props),\n\n      // `value` property is duplicated in state.\n      // The reason is that `getDerivedStateFromProps()`\n      // needs this `value` to compare to the new `value` property\n      // to find out if `parsed_input` needs updating:\n      // If the `value` property was changed externally\n      // then it won't be equal to `state.value`\n      // in which case `parsed_input` and `country` should be updated.\n      value\n    };\n  }\n\n  componentDidMount() {\n    const { onCountryChange } = this.props;\n    let { country } = this.props;\n    const { country: selectedCountry } = this.state;\n\n    if (onCountryChange) {\n      if (!country || !this.isCountrySupportedWithError(country)) {\n        country = undefined;\n      }\n      if (selectedCountry !== country) {\n        onCountryChange(selectedCountry);\n      }\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { onCountryChange } = this.props;\n    // Call `onCountryChange` when user selects another country.\n    if (onCountryChange && this.state.country !== prevState.country) {\n      onCountryChange(this.state.country);\n    }\n  }\n\n  // A shorthand for not passing `metadata` as a second argument.\n  isCountrySupportedWithError = country => {\n    const { metadata } = this.props;\n    return isCountrySupportedWithError(country, metadata);\n  };\n\n  // Country `<select/>` `onChange` handler.\n  onCountryChange = new_country => {\n    const { metadata, onChange } = this.props;\n\n    const { parsed_input: old_parsed_input, country: old_country } = this.state;\n\n    // After the new `country` has been selected,\n    // if the phone number `<input/>` holds any digits\n    // then migrate those digits for the new `country`.\n    const new_parsed_input = migrateParsedInputForNewCountry(\n      old_parsed_input,\n      old_country,\n      new_country,\n      metadata,\n      // Convert to \"local\" phone number format.\n      true\n    );\n\n    const new_value = e164(new_parsed_input, new_country, metadata);\n\n    // Focus phone number `<input/>` upon country selection.\n    this.focus();\n\n    // If the user has already manually selected a country\n    // then don't override that already selected country\n    // if the default `country` property changes.\n    // That's what `hasUserSelectedACountry` flag is for.\n\n    this.setState(\n      {\n        country: new_country,\n        hasUserSelectedACountry: true,\n        parsed_input: new_parsed_input,\n        value: new_value\n      },\n      () => {\n        // Update the new `value` property.\n        // Doing it after the `state` has been updated\n        // because `onChange()` will trigger `getDerivedStateFromProps()`\n        // with the new `value` which will be compared to `state.value` there.\n        onChange(new_value);\n      }\n    );\n  };\n\n  // Phone number `<input/>` `onKeyDown` handler.\n  onPhoneNumberKeyDown = event => {\n    const { onKeyDown } = this.props;\n\n    // Actually \"Down arrow\" key is used for showing \"autocomplete\" (\"autofill\") options.\n    // (e.g. previously entered phone numbers for `autoComplete=\"tel\"`)\n    // so can't hijack \"Down arrow\" keypress here.\n    // // Expand country `<select/>`` on \"Down arrow\" key press.\n    // if (event.keyCode === 40) {\n    // \tthis.country_select.toggle()\n    // }\n\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n  };\n\n  /**\n   * `<input/>` `onChange()` handler.\n   * Updates `value` property accordingly (so that they are kept in sync).\n   * @param {string?} input — Either a parsed phone number or an empty string. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\n   */\n  onChange = _input => {\n    const { onChange, international, limitMaxLength, metadata } = this.props;\n\n    const { input, country, value } = parseInput(\n      _input,\n      this.state.parsed_input,\n      this.state.country,\n      this.state.countries,\n      international,\n      limitMaxLength,\n      metadata\n    );\n\n    this.setState(\n      {\n        parsed_input: input,\n        value,\n        country\n      },\n      // Update the new `value` property.\n      // Doing it after the `state` has been updated\n      // because `onChange()` will trigger `getDerivedStateFromProps()`\n      // with the new `value` which will be compared to `state.value` there.\n      () => onChange(value)\n    );\n  };\n\n  // Toggles the `--focus` CSS class.\n  _onFocus = () => this.setState({ isFocused: true });\n\n  // Toggles the `--focus` CSS class.\n  _onBlur = () => this.setState({ isFocused: false });\n\n  onFocus = event => {\n    const { onFocus } = this.props;\n    this._onFocus();\n    if (onFocus) {\n      onFocus(event);\n    }\n  };\n\n  // This `onBlur` interceptor is a workaround for `redux-form`\n  // so that it gets the up-to-date `value` in its `onBlur` handler.\n  // Without this fix it just gets the actual (raw) input field textual value.\n  // E.g. `+7 800 555 35 35` instead of `+78005553535`.\n  //\n  // A developer is not supposed to pass this `onBlur` property manually.\n  // Instead, `redux-form` passes `onBlur` to this component automatically\n  // and this component patches that `onBlur` handler (a hacky way but works).\n  //\n  onBlur = event => {\n    const { onBlur } = this.props;\n    const { value } = this.state;\n\n    this._onBlur();\n\n    if (!onBlur) {\n      return;\n    }\n\n    // `event` is React's `SyntheticEvent`.\n    // Its `.value` is read-only therefore cloning it.\n    const _event = {\n      ...event,\n      target: {\n        ...event.target,\n        value\n      }\n    };\n\n    // For `redux-form` event detection.\n    // https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\n    _event.stopPropagation = event.stopPropagation;\n    _event.preventDefault = event.preventDefault;\n\n    return onBlur(_event);\n  };\n\n  // When country `<select/>` is toggled.\n  hidePhoneInputField = hide => {\n    this.setState({\n      hidePhoneInputField: hide\n    });\n  };\n\n  // Can be called externally.\n  focus = () => this.number_input.focus();\n\n  storeCountrySelectInstance = _ => (this.country_select = _);\n\n  storePhoneNumberInputInstance = _ => (this.number_input = _);\n\n  // `state` holds previous props as `props`, and also:\n  // * `country` — The currently selected country, e.g. `\"RU\"`.\n  // * `value` — The currently entered phone number (E.164), e.g. `+78005553535`.\n  // * `parsed_input` — The parsed `<input/>` value, e.g. `8005553535`.\n  // (and a couple of other less significant properties)\n  static getDerivedStateFromProps(props, state) {\n    const {\n      country,\n      hasUserSelectedACountry,\n      value,\n      props: { country: old_default_country, value: old_value }\n    } = state;\n\n    const {\n      metadata,\n      countries,\n      country: new_default_country,\n      value: new_value\n    } = props;\n\n    const new_state = {\n      // Emulate `prevProps` via `state.props`.\n      props,\n      // If the user has already manually selected a country\n      // then don't override that already selected country\n      // if the default `country` property changes.\n      // That's what `hasUserSelectedACountry` flag is for.\n      hasUserSelectedACountry\n    };\n\n    // If `countries` or `labels` or `international` changed\n    // then re-generate country `<select/>` options.\n    if (\n      props.countries !== state.props.countries ||\n      props.labels !== state.props.labels ||\n      props.international !== state.props.international\n    ) {\n      // Re-generate country select options.\n      new_state.country_select_options = generateCountrySelectOptions(\n        filterCountries(props.countries, metadata),\n        filterCountryOptions(props.countryOptions, metadata),\n        props\n      );\n    }\n\n    // If the default country changed.\n    // (e.g. in case of ajax GeoIP detection after page loaded)\n    // then select it but only if the user hasn't already manually\n    // selected a country and no phone number has been entered so far.\n    // Because if the user has already started inputting a phone number\n    // then he's okay with no country being selected at all (\"International\")\n    // and doesn't want to be disturbed, doesn't want his input to be screwed, etc.\n    if (\n      new_default_country !== old_default_country &&\n      !hasUserSelectedACountry &&\n      !value &&\n      !new_value\n    ) {\n      return {\n        ...new_state,\n        country: isCountrySupportedWithError(new_default_country, metadata)\n          ? new_default_country\n          : old_default_country\n        // `value` is `undefined`.\n        // `parsed_input` is `undefined` because `value` is `undefined`.\n      };\n    }\n    // If a new `value` is set externally.\n    // (e.g. as a result of an ajax API request\n    //  to get user's phone after page loaded)\n    // The first part — `new_value !== old_value` —\n    // is basically `props.value !== prevProps.value`\n    // so it means \"if value property was changed externally\".\n    // The second part — `new_value !== value` —\n    // is for ignoring the `getDerivedStateFromProps()` call\n    // which happens in `this.onChange()` right after `this.setState()`.\n    // If this `getDerivedStateFromProps()` call isn't ignored\n    // then the country flag would reset on each input.\n    else if (new_value !== old_value && new_value !== value) {\n      const phoneNumber = parsePhoneNumber(new_value, metadata);\n      let parsedCountry;\n      if (phoneNumber) {\n        const countries = filterCountries(props.countries, metadata);\n        if (!countries || countries.indexOf(phoneNumber.country) >= 0) {\n          parsedCountry = phoneNumber.country;\n        }\n      }\n      return {\n        ...new_state,\n        parsed_input: generateParsedInput(new_value, phoneNumber, props),\n        value: new_value,\n        country: new_value ? parsedCountry : country\n      };\n    }\n\n    // `country` didn't change.\n    // `value` didn't change.\n    // `parsed_input` didn't change, because `value` didn't change.\n    //\n    // Maybe `new_state.country_select_options` changed.\n    // In any case, update `prevProps`.\n    return new_state;\n  }\n\n  render() {\n    const {\n      name,\n      disabled,\n      disablePhoneInput,\n      autoComplete,\n      countrySelectTabIndex,\n      showCountrySelect,\n      style,\n      className,\n      inputClassName,\n      getInputClassName,\n      countrySelectAriaLabel,\n      countrySelectProperties,\n\n      error,\n      indicateInvalid,\n\n      countrySelectComponent: CountrySelectComponent,\n      countrySelectProps,\n      inputComponent: InputComponent,\n      numberInputComponent: inputComponent,\n      numberInputProps,\n      // smartCaret,\n      ext,\n\n      // Extract `phoneNumberInputProps` via \"object rest spread\":\n      country: _,\n      countries,\n      countryOptions,\n      labels,\n      flags,\n      flagComponent,\n      flagsPath,\n      international,\n      internationalIcon,\n      displayInitialValueAsLocalNumber,\n      onCountryChange,\n      limitMaxLength,\n      metadata,\n      ...phoneNumberInputProps\n    } = this.props;\n\n    const {\n      country,\n      hidePhoneInputField,\n      country_select_options,\n      parsed_input,\n      isFocused\n    } = this.state;\n\n    // const InputComponent = InputComponent || (smartCaret ? InputSmart : InputBasic)\n\n    // Extract `countrySelectProperties` from `this.props`\n    // also removing them from `phoneNumberInputProps`.\n    const _countrySelectProps = {};\n    if (countrySelectProperties) {\n      for (const key in countrySelectProperties) {\n        if (this.props.hasOwnProperty(key)) {\n          _countrySelectProps[countrySelectProperties[key]] = this.props[key];\n          delete phoneNumberInputProps[key];\n        }\n      }\n    }\n\n    // Could use something like `aria-label={labels.phone}` on the `<InputComponent/>`,\n    // however, some users may have already been using this component with one of:\n    // * `<label/>` container\n    // * `aria-labelledby`\n    // * `id` and `<label for/>`\n    // https://developers.google.com/web/fundamentals/accessibility/semantics-aria/aria-labels-and-relationships\n    // Maybe in some future major version update.\n\n    return (\n      <div\n        style={style}\n        className={classNames(\n          \"react-phone-number-input\",\n          {\n            \"react-phone-number-input--focus\": isFocused,\n            \"react-phone-number-input--invalid\": error && indicateInvalid\n          },\n          className\n        )}\n      >\n        {/* Country `<select/>` and phone number `<input/>` */}\n        <div className=\"react-phone-number-input__row\">\n          {/* Country `<select/>` */}\n          {showCountrySelect && (\n            <CountrySelectComponent\n              {..._countrySelectProps}\n              ref={this.storeCountrySelectInstance}\n              name={name ? `${name}__country` : undefined}\n              aria-label={countrySelectAriaLabel || labels.country}\n              tabIndex={countrySelectTabIndex}\n              {...countrySelectProps}\n              value={country}\n              options={country_select_options}\n              onChange={this.onCountryChange}\n              onFocus={this._onFocus}\n              onBlur={this._onBlur}\n              disabled={disabled}\n              hidePhoneInputField={this.hidePhoneInputField}\n              focusPhoneInputField={this.focus}\n              className=\"react-phone-number-input__country\"\n            />\n          )}\n\n          {/* Phone number `<input/>` */}\n          {!hidePhoneInputField && (\n            <InputComponent\n              type=\"tel\"\n              autoComplete={autoComplete}\n              {...numberInputProps}\n              {...phoneNumberInputProps}\n              ref={this.storePhoneNumberInputInstance}\n              name={name}\n              metadata={metadata}\n              country={country}\n              value={parsed_input || \"\"}\n              onChange={this.onChange}\n              onFocus={this.onFocus}\n              onBlur={this.onBlur}\n              onKeyDown={this.onPhoneNumberKeyDown}\n              disabled={disabled || disablePhoneInput}\n              inputComponent={inputComponent}\n              className={classNames(\n                \"react-phone-number-input__input\",\n                \"react-phone-number-input__phone\",\n                {\n                  \"react-phone-number-input__input--disabled\":\n                    disabled || disablePhoneInput,\n                  \"react-phone-number-input__input--invalid\":\n                    error && indicateInvalid\n                },\n                inputClassName,\n                getInputClassName &&\n                  getInputClassName({\n                    disabled: disabled || disablePhoneInput,\n                    invalid: error && indicateInvalid\n                  })\n              )}\n            />\n          )}\n\n          {/* Phone extension `<input/>` */}\n          {ext && !hidePhoneInputField && (\n            <label className=\"react-phone-number-input__ext\">\n              {labels.ext}\n              {React.cloneElement(ext, {\n                onChange: ext.props.onChange\n                  ? event => ext.props.onChange(parseExtDigits(event))\n                  : undefined,\n                onFocus: this._onFocus,\n                onBlur: this._onBlur,\n                className: classNames(\n                  \"react-phone-number-input__input\",\n                  \"react-phone-number-input__ext-input\",\n                  {\n                    \"react-phone-number-input__input--disabled\":\n                      disabled || disablePhoneInput\n                  },\n                  inputClassName,\n                  getInputClassName &&\n                    getInputClassName({\n                      disabled: disabled || disablePhoneInput\n                    }),\n                  ext.props.className\n                )\n              })}\n            </label>\n          )}\n        </div>\n\n        {/* Error message */}\n        {error && indicateInvalid && (\n          <div className=\"react-phone-number-input__error\">{error}</div>\n        )}\n      </div>\n    );\n  }\n}\n\n// Generates country `<select/>` options.\nfunction generateCountrySelectOptions(countries, countryOptions, props) {\n  const { labels, international, metadata } = props;\n\n  const CountrySelectOptionIcon = createCountrySelectOptionIconComponent(props);\n\n  return transformCountryOptions(\n    getCountrySelectOptions(\n      countries ||\n        getCountryCodes(labels).filter(\n          country => country === \"ZZ\" || isCountrySupported(country, metadata)\n        ),\n      labels,\n      international\n    ).map(({ value, label }) => ({\n      value,\n      label,\n      icon: CountrySelectOptionIcon\n    })),\n    countryOptions\n  );\n}\n\nfunction createCountrySelectOptionIconComponent(props) {\n  const {\n    flags,\n    flagsPath,\n    flagComponent: FlagComponent,\n    internationalIcon: InternationalIcon\n  } = props;\n\n  return ({ value }) => (\n    <div\n      className={classNames(\"react-phone-number-input__icon\", {\n        \"react-phone-number-input__icon--international\": value === undefined\n      })}\n    >\n      {value ? (\n        <FlagComponent country={value} flags={flags} flagsPath={flagsPath} />\n      ) : (\n        <InternationalIcon />\n      )}\n    </div>\n  );\n}\n\n// Can move some country `<select/>` options\n// to the top of the list, for example.\n// See `countryOptions` property.\nfunction transformCountryOptions(options, transform) {\n  if (!transform) {\n    return options;\n  }\n\n  const optionsOnTop = [];\n  const optionsOnBottom = [];\n  let appendTo = optionsOnTop;\n\n  for (const element of transform) {\n    if (element === \"|\") {\n      appendTo.push({ divider: true });\n    } else if (element === \"...\" || element === \"…\") {\n      appendTo = optionsOnBottom;\n    } else {\n      // Find the position of the option.\n      const index = options.indexOf(\n        options.filter(option => option.value === element)[0]\n      );\n      // Get the option.\n      const option = options[index];\n      // Remove the option from its default position.\n      options.splice(index, 1);\n      // Add the option on top.\n      appendTo.push(option);\n    }\n  }\n\n  return optionsOnTop.concat(options).concat(optionsOnBottom);\n}\n\nfunction generateParsedInput(value, phoneNumber, props) {\n  const { displayInitialValueAsLocalNumber } = props;\n\n  // If the `value` (E.164 phone number)\n  // belongs to the currently selected country\n  // and `displayInitialValueAsLocalNumber` property is `true`\n  // then convert `value` (E.164 phone number)\n  // to a local phone number digits.\n  // E.g. '+78005553535' -> '88005553535'.\n  if (displayInitialValueAsLocalNumber && phoneNumber && phoneNumber.country) {\n    return generateNationalNumberDigits(phoneNumber);\n  }\n\n  return value;\n}\n\nfunction isCountrySupported(country, metadata) {\n  return metadata.countries.hasOwnProperty(country);\n}\n\nfunction isCountrySupportedWithError(country, metadata) {\n  if (isCountrySupported(country, metadata)) {\n    return true;\n  } else {\n    console.error(`Country not found: ${country}`);\n    return false;\n  }\n}\n\nfunction isCountryOptionSupportedWithError(countryOption, metadata) {\n  switch (countryOption) {\n    case \"|\":\n    case \"...\":\n    case \"…\":\n      return true;\n    default:\n      return isCountrySupportedWithError(countryOption, metadata);\n  }\n}\n\nfunction filterCountries(countries, metadata) {\n  if (countries) {\n    countries = countries.filter(country =>\n      isCountrySupportedWithError(country, metadata)\n    );\n    if (countries.length === 0) {\n      countries = undefined;\n    }\n  }\n  return countries;\n}\n\nfunction filterCountryOptions(countryOptions, metadata) {\n  if (countryOptions) {\n    countryOptions = countryOptions.filter(countryOption =>\n      isCountryOptionSupportedWithError(countryOption, metadata)\n    );\n    if (countryOptions.length === 0) {\n      countryOptions = undefined;\n    }\n  }\n  return countryOptions;\n}\n\nfunction parseExtDigits(event) {\n  if (event) {\n    if (typeof event === \"string\") {\n      event = parseDigits(event);\n    } else if (event.target && event.target.value) {\n      event.target.value = parseDigits(event.target.value);\n    }\n  }\n  return event;\n}\n"]}